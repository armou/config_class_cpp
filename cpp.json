{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"HCLASS": {
		"prefix": "hclass",
		"body": [
			"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"# define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"",
			"#include <iostream>",
			"",
			"class ${TM_FILENAME_BASE/(.)/${1:/upcase}/} {",
			"\tpublic:",
			"\t\t${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( void );",
			"\t\t${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( int const n );",
			"\t\t${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( ${TM_FILENAME_BASE/(.)/${1:/upcase}/} const & src );",
			"\t\t~${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( void );",
			"",
			"\t\t${TM_FILENAME_BASE/(.)/${1:/upcase}/} &\toperator=( ${TM_FILENAME_BASE/(.)/${1:/upcase}/} const & rhs );",
			"",
			// "\t\tint\tgetFoo( void ) const;",
			// "",
			"\tprivate:",
			"",
			// "\t\tint\t_foo;",
			// "",
			"};",
			"",
			"#endif",
		],
		"description": "create hclass"
	},
	"CCLASS": {
		"prefix": "cclass",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( void ) {",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( int const n ) {",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( ${TM_FILENAME_BASE/(.)/${1:/upcase}/} const & src ) {",
			"\t*this = src;",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::~${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( void ) {",
			"\treturn;",
			"}",
			"",
		],
		"description": "create cclass"
	},
	"CCLASSMESSAGE": {
		"prefix": "cclassm",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( void ) {",
			"\tstd::cout << \"Default constructor Called\" << std::endl;",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( int const n ) {",
			"\tstd::cout << \"Parametric constructor Called\" << std::endl;",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( ${TM_FILENAME_BASE/(.)/${1:/upcase}/} const & src ) {",
			"\tstd::cout << \"Copy constructor Called\" << std::endl;",
			"\t*this = src;",
			"\treturn;",
			"}",
			"",
			"${TM_FILENAME_BASE/(.)/${1:/upcase}/}::~${TM_FILENAME_BASE/(.)/${1:/upcase}/} ( void ) {",
			"\tstd::cout << \"Destructor Called\" << std::endl;",
			"\treturn;",
			"}",
			"",
		],
		"description": "create cclass"
	}
}